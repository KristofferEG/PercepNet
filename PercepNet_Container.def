Bootstrap: docker
From: ubuntu:20.04

%post
    # Non-interactive frontend & timezone preseed (must appear before any apt-get)
    export DEBIAN_FRONTEND=noninteractive
    echo "tzdata tzdata/Areas select Europe" | debconf-set-selections
    echo "tzdata tzdata/Zones/Europe select Copenhagen" | debconf-set-selections
    ln -sf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime
    echo "Europe/Copenhagen" > /etc/timezone

    # Set temporary directory (matches your original example)
    export TMPDIR=/tmp
    mkdir -p $TMPDIR

    # Update system
    apt-get update
    apt-get upgrade -y

    # Install Python, pip, CMake, SoX and native libs needed by audio/ML packages
    apt-get install -y --no-install-recommends \
        python3 python3-pip python3-dev python3-venv \
        cmake \
        sox libsox-dev libsox-fmt-all \
        libsndfile1 libsndfile1-dev \
        libhdf5-serial-dev build-essential \
        locales ca-certificates wget curl

    # Upgrade pip tooling
    python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel

    # Install pinned numpy first to avoid ABI issues
    python3 -m pip install --no-cache-dir numpy

    # Install the project's Python dependencies (pinned where provided)
    # Map 'yaml' -> pyyaml (PyPI name). glob is stdlib; no install needed.
    python3 -m pip install --no-cache-dir \
        soundfile \
        librosa==0.10.1 \
        configparser==6.0.0 \
        pandas \
        onnxruntime==1.16.3 \
        onnxruntime-gpu==1.16.3 \
        tensorboardX \
        matplotlib \
        h5py \
        pyyaml \
        tqdm \
        tensorboard \
        pesq

    # Install GPU builds of torch/vision/audio for CUDA support
    python3 -m pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cu121 \
        torch==2.1.2+cu121 torchvision==0.16.2+cu121 torchaudio==2.1.2+cu121



%test
    # Test that Python works
    python3 --version
    python3 -c "import numpy, soundfile, torch, torchvision, torchaudio, tensorboardX, matplotlib, h5py, yaml, tqdm, pandas, onnxruntime; print('All packages imported successfully')"
    # Test CUDA availability and L40 compatibility
    python3 -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}'); print(f'PyTorch version: {torch.__version__}'); print(f'CUDA version: {torch.version.cuda}')"